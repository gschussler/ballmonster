@use "sass:color";
@use "sass:map";
@use "variables.scss";
/* Main development styles, compile to css for production */
/* RUN `sass --watch scss/index.scss:dist/index.css --style compressed` */

:root {
  color-scheme: dark light; /* Explicitly declare dark mode support */
  background-color: variables.$background-color; /* Cover the entire viewport */
  margin: 0;
  padding: 0;
  min-height: 100vh; /* Ensure full viewport coverage */
}

/* Global styles */
body {
  font-family: Arial, sans-serif;
  color: variables.$text-color;
  user-select: none;
  margin: 0;
  padding: 0;
}

h1 {
  color: #ff3e00;
}

nav a.active {
  font-weight: bold;
  color: #f00; /* Or any color of your choice */
}

/* offense styles */
.offense {
  display: grid;
  grid-template-columns: 50% 50%;
  gap: 1rem;
  padding: 1rem;
}

.defense {
  display: grid;
  grid-template-columns: 50% 50%;
  gap: 2rem;
  padding: 1rem;
}

.selectable {
  display: grid;
  grid-template-rows: repeat(2, 0.25fr) 0.5fr;
  gap: 0.5rem;
  padding: 1rem;
}

.primary-types, .secondary-types {
  flex: 1;
}

.button-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  gap: 0.5rem;
}

.icon { // viewBox 0 0 64 64
  position: absolute;
  top: 0;
  left: 0;
  width: 35%;
  height: 100%;
  stroke: variables.$background-color;
  stroke-width: 2;
  transition: fill 0.2s stroke 0.2s;
}

.button-grid button, .gen-grid button {
  display: block;
  position: relative;
  overflow: hidden;
  align-items: center;
  padding: 0.5rem;
  background-color: color.adjust(variables.$background-color, $lightness: 10%);
  border: 2px groove color.adjust(variables.$background-color, $lightness: 30%);
  border-radius: 4px;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.9), 0px 0px 10px rgba(0, 0, 0, 0.9);
  cursor: pointer;
  transition: background-color 0.2s;

  &:hover:not(:disabled) {
    background-color: color.adjust(variables.$background-color, $lightness: 25%);
  }
  
  &.selected {
    background-color: variables.$generic-selected;
    color: white;
    border-color: #388E3C;

    .icon {
      fill: variables.$background-color;
    }
  }

  &:disabled {
    cursor: default;
  }
};

/* Loop to generate type-specific button styles */
@each $type, $color in variables.$pokemon-type-colors {
  $hover-color: map.get(variables.$pokemon-type-colors-light, $type);
  $selected-color: map.get(variables.$pokemon-type-colors-dark, $type);
  
  .button-grid button.#{$type} {
    // border-color: $selected-color;
    padding-left: 35%;

    // &:hover {
    //   background-color: $hover-color;
    // }

    &.selected {
      background-color: $selected-color;
      border-color: $hover-color;

      .icon {
        fill: variables.$background-color;
        stroke: $color
      }
    }

    &:disabled {
      .icon {
        fill: variables.$background-color; // Desaturate the type color for disabled buttons
        // stroke: desaturate($hover-color, 50%);
      }
    }
  }

  .button-grid button.#{$type} .icon {
    fill: $color;
  }

  .result-group ul li[data-type="#{$type}"] {
    color: $color;
  }
};

.exceptions_o {

}

.exceptions_d {

}

.special-moves {

}

.special-effects {
  
}

.effect-list {
  display: flex;
  flex-direction: column;
  color:variables.$generic-selected;
}

.needs-work {
  color: orange;
}

.effectiveness-results {
  flex: 1;
  flex-direction: column;
}

.result-groups {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.result-group {
  display: none;
  background-color: variables.$background-color;
  padding: 1rem;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.result-group h3 {
  margin-top: 0;
}

.result-group ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.result-group li {
  padding: 0.25rem 0;
}

/* More styles */

.gen-selection {
  flex: 1;
}