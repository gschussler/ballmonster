@use "sass:color";
@use "sass:map";
@use "variables.scss";
@function clr($base, $shade: base) {
  $color-map: map.get(variables.$type-colors, $base);
  $color: map.get($color-map, $shade);
  @return $color;
}
/* Main development styles, compile to css for production */
/* RUN `sass --watch scss/index.scss:dist/index.css --style compressed` */

:root {
  color-scheme: dark light; /* Explicitly declare dark mode support */
  background-color: variables.$background-color; /* Cover the entire viewport */
  margin: 0;
  padding: 0;
  scrollbar-gutter: stable;
  min-height: 100vh;
}

/* Global styles */
body {
  font-family: "Lato", system-ui, sans-serif;
  font-size: 16px;
  color: variables.$text-color;
  user-select: none;
  margin: 0 0 0 6px; // slight right-shift to account for scrollbar-gutter
  // margin: 0;
  padding: 0;
}

footer {
  text-align: center;
  margin-top: 1rem;
  padding: 1rem;
}

header { //#ffbd16 & #332c2b
  display: grid;
  grid-template-rows: auto;
  justify-content: center;
}

header div {
  display: grid;
  grid-template-columns: auto 64px auto;
  justify-content: center;
  margin: 0.5em 0.5em 0.25em;
  padding: 0.5em 0.5em 0.25em;
  // background: variables.$background-color-light1; // temp figuring out spacing

  // trailing space after text needs adjusting for true centering with middle img
    // if changing spacing from image, margin-right for first, margin-left for last
  :first-child {
    justify-self: end;
    margin: 0 0 0 8px;
  }

  :last-child {
    justify-self: start;
    margin: 0 0 0 8px;
  }
}

header img { // 64px x 64px
  justify-self: center;

}

header h1 {
  font-family: "Pokemon Classic";
  text-shadow: variables.$text-shadow;
  white-space: nowrap;
}

header p {
  grid-column: 1 / -1;
  text-align: right;
  margin: -1rem 8px 0 0;
  padding-right: 1em;
  font-style: italic;
  text-shadow: variables.$text-shadow;
  // background: variables.$background-color-light1; // temp figuring out spacing
}

nav {
  display: flex;
  flex-wrap: wrap;
  flex-basis: min-content;
  justify-content: center;
  margin-top: 1em;
  padding: 0.5rem;
  gap: 0.5rem;
  font-weight: bold;
  // background: variables.$background-color-dark1;
}

nav a {
  text-decoration: none;
  padding: 0.25rem 1rem;
  text-align: center;
  border: 1px solid ;
  background-color: variables.$background-color-light1;
  color: variables.$text-color;
  text-shadow: variables.$text-shadow;
  border-color: variables.$background-color-light2;
  border-radius: 20px;
  transition: background-color 0.2s color 0.2s;

  &:hover {
    background-color: variables.$background-color-light2;
  }
}

nav a.active {
  background-color: variables.$text-color;
  color: variables.$background-color;
  text-shadow: variables.$text-shadow-inverse;
}

main {
  margin: 0 0 0 30px; // centering indentation to align with selectable-gutter
  justify-self: center;
}

/* offense styles */
.offense {
  display: grid;
  grid-template-columns: 0.5fr 0.5fr;
  gap: 2rem;
}

.defense {
  display: grid;
  grid-template-columns: 0.5fr 0.5fr;
  gap: 2rem;
}

.selectable-o {
  display: grid;
  grid-template-rows: 0.25fr 0.75fr;
  gap: 0.5rem;
  padding: 1rem;
}

.selectable-d {
  display: grid;
  grid-template-rows: repeat(2, 0.25fr) 0.5fr;
  gap: 0.5rem;
  padding: 1rem;
}

.primary-types, .secondary-types {

}

.button-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  gap: 8px;
}

.icon { // viewBox 0 0 64 64
  position: absolute;
  top: 0;
  left: 0;
  width: 35%;
  height: 100%;
  stroke: variables.$background-color;
  stroke-width: 2;
  transition: fill 0.2s stroke 0.2s;
}

.button-grid button {
  display: block;
  position: relative;
  overflow: hidden;
  align-items: center;
  padding: 0.5rem;
  background-color: variables.$background-color-light1;
  border: 1px ridge variables.$background-color-light3;
  border-radius: 2px;
  text-shadow: variables.$text-shadow;
  cursor: pointer;
  transition: background-color 0.2s;

  &:hover:not(:disabled):not(.selected) {
    background-color: variables.$background-color-light3;
  }
  
  &.selected {
    background-color: variables.$text-color;
    color: variables.$background-color;
    border-color: variables.$background-color-light1;
    text-shadow: variables.$text-shadow-inverse;

    .icon {
      fill: variables.$background-color;
    }
  }

  &:disabled {
    cursor: default;
  }
};

/* Loop to generate type-specific button styles */
@each $type, $colors in variables.$type-colors {
  $hover-color: clr($type, light);
  $selected-color: clr($type, dark);
  
  .button-grid button.#{$type} {
    // border-color: $selected-color;
    padding-left: 35%;

    // &:hover {
    //   background-color: $hover-color;
    // }

    &.selected {
      background-color: $selected-color;
      border-color: variables.$text-color-dark1;
      color: variables.$text-color;
      text-shadow: variables.$text-shadow;

      .icon {
        fill: variables.$background-color;
        stroke: clr($type);
      }
    }

    &:disabled {
      .icon {
        fill: variables.$background-color;
      }
    }
  }

  .button-grid button.#{$type} .icon {
    fill: clr($type);
  }

  @if $type != "tera" {
    .result-group ul li[data-type="#{$type}"] {
      background-color: $selected-color;
      border: 3px ridge $hover-color;
    } 
  } else {
    .result-group ul li[data-type="#{$type}"] {
      background: variables.$background-color;
      border: 3px ridge $hover-color;
    } 
  }
};

.exceptions_o {

}

.exceptions_d {

}

.special-moves-o {

}

.special-moves-d {

}

.close-x {
  display: none;
  position: absolute;
  line-height: 0.6rem;
  border-radius: 2px;
  height: 12px;
  width: 12px;
  top: 2px;
  left: 2px;
  color: red;
  text-shadow: variables.$text-color;
  background-color: variables.$background-color-light2;
  // background-color: variables.$background-color;
}

button.selected .close-x {
  display: inline;
}

.special-effects {
  
}

.ability-select {

}

.effectiveness-results {
  display: grid;
}

.result-groups {
  // display: block;
}

.result-group {
  display: grid;
  grid-template-rows: 0.1fr 0.9fr;
  padding: 1rem;
  gap: 0.5rem;
  // border-radius: 4px;
  // box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.result-group h3 {
  margin: 0.5em 0 0.5em;
}

.result-group ul {
  display: grid;
  grid-template-columns: repeat(auto-fill, 110px);
  list-style: none;
  padding: 0;
  margin: 0;
  gap: 3px;
}

.result-group li {
  text-align: center;
  padding: 0.5rem;
  border-radius: 6px;
  text-shadow: variables.$text-shadow;
}

/* More styles */

.gen-selection {
  flex: 1;
}

@font-face {
  font-family: 'Pokemon Classic';
  src:
    url('subset-Pokemon-Classic.woff2') format('woff2'),
    url('subset-Pokemon-Classic.woff') format('woff');
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}